version: '3.8' # Specifies the docker-compose version

services:
  # Service for the Python Flask web application
  app:
    build: . # Tells docker-compose to build the image from the Dockerfile in the current directory
    container_name: speccs_app
    ports:
      - "5000:5000" # Map port 5000 on the host to port 5000 in the container (Flask default)
    volumes:
      - .:/app # Mount the current directory on the host to /app in the container (for live code updates)
    environment:
      # Environment variables for Flask
      - FLASK_APP=app.py
      - FLASK_ENV=development # Use 'production' for deployment
      # Environment variables for connecting to the database
      # These should match the ones defined in the 'db' service below
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db # Tells docker-compose to start the 'db' service before starting the 'app' service
    networks:
      - speccs_network # Connect this service to our custom network
    restart: unless-stopped

  # Service for the PostgreSQL database
  db:
    image: postgres:15 # Use the official PostgreSQL image (version 15)
    container_name: speccs_db
    environment:
      # These variables are used by the PostgreSQL image to initialize the database
      # It's highly recommended to use a .env file for sensitive values like passwords
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data using a named volume
    networks:
      - speccs_network # Connect this service to our custom network
    # Optional: Expose port 5432 if you need direct access from your host machine (e.g., for DB tools)
    # ports:
    #   - "5433:5432" # Maps container port 5432 to host port 5433 (avoiding conflicts)
    restart: unless-stopped

# Define the custom network
networks:
  speccs_network:
    driver: bridge

# Define the named volume for persistent database storage
volumes:
  postgres_data:
